package org.jruby.parser;

import java.util.ArrayList;
import java.io.InputStream;
import org.jruby.ast.java_signature.ArrayAnnotationExpression;
import java.util.List;
import org.jruby.ast.java_signature.AnnotationExpression;
import org.jruby.ast.java_signature.Modifier;
import org.jruby.ast.java_signature.TypeNode;
import org.jruby.lexer.JavaSignatureBeaverLexer;
import org.jruby.ast.java_signature.ConstructorSignatureNode;
import org.jruby.ast.java_signature.Literal;
import java.io.IOException;
import org.jruby.ast.java_signature.ArrayTypeNode;
import org.jruby.ast.java_signature.ReferenceTypeNode;
import org.jruby.ast.java_signature.SignatureNode;
import beaver.*;
import org.jruby.ast.java_signature.StringLiteral;
import org.jruby.ast.java_signature.AnnotationParameter;
import org.jruby.ast.java_signature.Annotation;
import org.jruby.ast.java_signature.CharacterLiteral;
import org.jruby.ast.java_signature.DefaultAnnotationParameter;
import org.jruby.ast.java_signature.PrimitiveTypeNode;
import org.jruby.ast.java_signature.ParameterNode;
import org.jruby.ast.java_signature.MethodSignatureNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JavaSignatureBeaverParser.grammar".
 */
public class JavaSignatureBeaverParser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short IDENTIFIER = 1;
		static public final short COMMA = 2;
		static public final short BYTE = 3;
		static public final short SHORT = 4;
		static public final short INT = 5;
		static public final short LONG = 6;
		static public final short CHAR = 7;
		static public final short BOOLEAN = 8;
		static public final short FLOAT = 9;
		static public final short DOUBLE = 10;
		static public final short GT = 11;
		static public final short LBRACK = 12;
		static public final short RPAREN = 13;
		static public final short DOT = 14;
		static public final short RSHIFT = 15;
		static public final short QUESTION = 16;
		static public final short AT = 17;
		static public final short THROWS = 18;
		static public final short FINAL = 19;
		static public final short LT = 20;
		static public final short LCURLY = 21;
		static public final short STRING_LITERAL = 22;
		static public final short CHARACTER_LITERAL = 23;
		static public final short EXTENDS = 24;
		static public final short URSHIFT = 25;
		static public final short LPAREN = 26;
		static public final short SUPER = 27;
		static public final short RBRACK = 28;
		static public final short ELLIPSIS = 29;
		static public final short VOID = 30;
		static public final short RCURLY = 31;
		static public final short PUBLIC = 32;
		static public final short PROTECTED = 33;
		static public final short PRIVATE = 34;
		static public final short STATIC = 35;
		static public final short ABSTRACT = 36;
		static public final short NATIVE = 37;
		static public final short SYNCHRONIZED = 38;
		static public final short TRANSIENT = 39;
		static public final short VOLATILE = 40;
		static public final short STRICTFP = 41;
		static public final short AND = 42;
		static public final short EQUAL = 43;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oLM0buLDKL$j#Ri3bP28Cqn4Ae86t34fQ09bB0420BL6GLWWfbfuk28Y0kh8eec#82A88" +
		"2YYYeW214L4GGGOc0kBGLMgmBsbPiNOhLut$Ft0nltioGyERxtxdtdVyizxxxxZ90e3jASI" +
		"aQenYN8Gi$ns9qm3MeBu8Bq4ZUn4Wa8uY5M8Jcw8oha8bkw8YRa8iSN1snRQ#s1M5R5AhjF" +
		"Fm6vyay#LX#f6qRsjwBARJDn13QHaTzW9O$GmP#OIpnEqoaVYRrqp63#dROQwBAUfJZ4NJ5" +
		"7jIKEt44hsC57iB32E5LPbheooRJ#inLd#$AFp0tokSJP7J4JhoCNDc8blIIZdTm5BtnMro" +
		"EFhW2VT4F$L43TyeDyWngeGugo4l1Bx4FR#4WGhJpixqnAZ0UQRGBiqlHJBDhgDaTOiQchq" +
		"AQtLZD89CPr4KgplTnxsVkXbjBkVTWYUMcir$FPyxtnMHH6fN53QY7rf4i8XhvYFtQ0A$84" +
		"PIpV3txDLCMQB$colMCm7wjmlFDsCMnaBWtAlY#jiW1N4HV5VWLVXtfZRQu5S$WMJo7JTYC" +
		"vx4Ls$02jfELZIreGNwh66$PSIsy6NLYY#QW2yT9EGvW1rlK4YKup1Q5QEttjz7NpxqmMaV" +
		"CVktdRDd85gLZlRnZlu8GteZnKGkrv4cinJYPYz#JCIs6yKUC8kCFCWT$mdMOH8OtunkPSM" +
		"rCnbHcV0jhp9Xl#pLcx6LbadKRMv9BrYnwt8FRSGVUr7OL#2FABBPaBUwYhabCDWlaOLagI" +
		"#Bfv5wvHnRgUxyuHhTO$YEBvA5uEkQp3a$o7aBt6BlRyHIUbjbu4TsZMXJYgFJxUIdo1UUH" +
		"qPGzbO$Ps4tkstmFvPWWfx139i9S8LmROs#kz$NU92eM60j8KgiDCLOk0dXFhMRBjQYy9k3" +
		"C5SAy6AiGdyT#6#7iUshs8MQVY36GZ44emfLn$Po9ExXQSQlxh3BwS8qEHZVZ$p4#UPHFLa" +
		"Q#XWir$yhQ26LNrfQozg1y31ZmMenbd8DNSqu7iGPbb6Lu77UJyH7Boz43Gt491c0CXd5i0" +
		"VEnYkCuzYhWjzgAyrGErugsd9#xaTM1CpHedSUt5DQQ5dNbgb70xx6GOyhX35l4lA9j6rhR" +
		"0TPsCFDt#KF4jX5jW$mL#Imph6M6MbuGYHlM5t1jCL5J#1LaCse#UnHSvphRNdQOjSkeqJw" +
		"3rcUQ#kmVnsUGFeVnlQJHMpAzf19ZEIwJkFhKv1nJcslFUHnNcOmCpkOkluTahWXchMZ0ES" +
		"lXKp$R6oETCL9f5sP7PvT5RoOxHxFhgHa4oMwfVHND7MYvzPHx5NS0OMwgSXtEdrLbuN2EZ" +
		"it2fSRLtyL43$PhaDBqQnfR7DH#hSfpVx8IzqOwtrU8FkjJcqxRJf7US3aMcd3dSI77V3Ek" +
		"LCsvlfkLolHmYAk2G$Yz9SUry6PKdnarrlQO5kNpbyoOfaKEItv$9Rv#xaHxqyzPsi$9#ds" +
		"aghymp#4UoU#Z7dyfr9WHsOKo5CDm#1MagDwCezvaUACcC#CoRQ#PuPCru$0xyBA2zXscaM" +
		"NwCf#nBhNjQXWJ4MGwcbNT69rhVubrmGIwO48xHxDnukgWEjFskb4jSjWYFpV5zpv2$89xS" +
		"5VYy7agMzwBvNoa22y#w#Utr#SbUe#AnNfxOf1Q3Oc9EeBxZ55grOFx2NkXbqIkUB7WyFdP" +
		"lersjCgjWb58HXm$dhY5rOfRtMTHqQdFzULJ$PfBQrTpx6Rdu23BGSvKQPHfPhq8CxY3pk0" +
		"8pU2SVYLXM4Ev9gL9p4KMyC5q$UYSHhm5YROicvt7J5tVmDaQFCy0immlpELU1Sw7bAk8dS" +
		"H1ubIbtd9#8ESBIh7rxJPEZfTdTQq1Tn9bXUKq9awpS1TbEyfjb9s8rbRVnifYA$DeNzlw6" +
		"XxjEy2Ls5t4maJBxSjw0riUmt8pQvViiykWRXavUort136MXRSef$lR4DicTprzjAYQvoma" +
		"r$JXzvG7MEUSxiomElQlKyB22ihLn4QMNwNSJ2mdbX3hRFv5jC#tPRvNPnEnrlhPvSdhAEl" +
		"SAJhRYSDMNsxbRkg7s39tYiv5n6UiJAPSGnppvFqrSPBuniRCPlbRZ$ux#WeGnws#bOtFtQ" +
		"bJWxA6hP$qs73Ck7M8T29azVM99jJDfymXchAyW9BZmkbOLVycU3TctC#XlCJczYDnpEfCc" +
		"vDZRRZtWpFUvjdKvwyFqTtth0LH6YTs8u$FOYBB#Xnj93$A4xwuSwrSdhWzJjzpQFlxtZhZ" +
		"VKMnbJxOxpXTjJtopk8xq#VxYCSkxInsKprjoRMok9hjcNSERTzdvN7Vyx$mDirytpRsQ6A" +
		"AHr$7rmSxBMzyubZutEl3yfTwz2liCpEkLjdo1iRgulV5VjpjiPkMe6sVM5dXuQPwz8SIvU" +
		"h9xmJngIsVElDjE#shiZrBFsJvwlizyUR7oI7NKrxfQsFpQiRyWBts2doNF2rVoBye$qdyc" +
		"zWac#MmrHqYZDL#UOFd$w$iqx#VuSkdl3zBF2UVY9wzfO9uJ$R9wvPzJDdlQfchX1oLlRB7" +
		"wZZ2vAHyAP$9zt9Q$YVVoRVoZNmj$rNjt#H3#RESaEFoLtbR3dfo$b8s#DkXpv$I#nEoLXw" +
		"dN26FocFo24khPOsib5NoW$nVirbNwKVlTyXoMr#czmVb0Lk$dxZFbZdJojt2jLS#r$efN#" +
		"pNP9UyB2$9JdbHocM7R9SNP9jibUTbYynKnWoztwptssIQt2HJjJo5c2GJv3gpBP39SgFSA" +
		"bpBv1RPBLpNi0ZZk0CRfplLC7AgG1kBRaGhHGqzDRJcJgoKSWnXJbrXr2IIUD8m9y20mfoP" +
		"yrG6U39rYO1YW9vk0mhklOW0zswkxYyBASqPy3AMkr9sfIoYBA8SJ3cOiWEbGKUB0ejYYq4" +
		"MGnGkHh7r9IoV2reg0Znvk4I0UtvNz$rbV5x6UXUsjP$kfC5zl4C4kDysfqw7g2nNoYGjzw" +
		"QkD#LGXSCTf460kqiNbrjShGZmLEmep5du6ag3ljIPVmVwK1fSGGna$97aZEIxwSau8nGr8" +
		"p9VJrT9UdxiJvuvtmvN17ZUSZmmTPSdml2fqEp6Xh5iqDbY$4yxJF4u");



    private static JavaSignatureBeaverParser parser = new JavaSignatureBeaverParser();

    public static SignatureNode parse(InputStream in) throws IOException, ParserSyntaxException, beaver.Parser.Exception {
        return (SignatureNode) parser.parse(JavaSignatureBeaverLexer.create(in));
 }

	private final Action[] actions;

	public JavaSignatureBeaverParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = method_header.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final MethodSignatureNode m = (MethodSignatureNode) _symbol_m.value;
					
                          return new Symbol((SignatureNode)(m));
                         //$$ = $1;
				}
			},
			new Action() {	// [1] program = constructor_declaration.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ConstructorSignatureNode c = (ConstructorSignatureNode) _symbol_c.value;
					
            return new Symbol((SignatureNode)(c));
                                   // $$ = $1;
				}
			},
			Action.RETURN,	// [2] type = primitive_type
			new Action() {	// [3] type = reference_type.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					
                                         return new Symbol((TypeNode)r);
                                          //$$ = $<TypeNode>1;
				}
			},
			new Action() {	// [4] primitive_type = BYTE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
            return new Symbol(PrimitiveTypeNode.BYTE);
        //$$ = PrimitiveTypeNode.BYTE;
				}
			},
			new Action() {	// [5] primitive_type = SHORT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
             return new Symbol(PrimitiveTypeNode.SHORT);
        //$$ = PrimitiveTypeNode.SHORT;
				}
			},
			new Action() {	// [6] primitive_type = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
           return new Symbol(PrimitiveTypeNode.INT);
        //$$ = PrimitiveTypeNode.INT;
				}
			},
			new Action() {	// [7] primitive_type = LONG
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
            return new Symbol(PrimitiveTypeNode.LONG);
        //$$ = PrimitiveTypeNode.LONG;
				}
			},
			new Action() {	// [8] primitive_type = CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
            return new Symbol(PrimitiveTypeNode.CHAR);
        //$$ = PrimitiveTypeNode.CHAR;
				}
			},
			new Action() {	// [9] primitive_type = BOOLEAN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
               return new Symbol(PrimitiveTypeNode.BOOLEAN);
        //$$ = PrimitiveTypeNode.BOOLEAN;
				}
			},
			new Action() {	// [10] primitive_type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
             return new Symbol(PrimitiveTypeNode.FLOAT);
        //$$ = PrimitiveTypeNode.FLOAT;
				}
			},
			new Action() {	// [11] primitive_type = DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
              return new Symbol(PrimitiveTypeNode.DOUBLE);
        //$$ = PrimitiveTypeNode.DOUBLE;
				}
			},
			new Action() {	// [12] reference_type = class_or_interface_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					
                                            return new Symbol((ReferenceTypeNode)c);
                                            // $$ = $1;
				}
			},
			new Action() {	// [13] reference_type = array_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ReferenceTypeNode a = (ReferenceTypeNode) _symbol_a.value;
					
     return new Symbol((ReferenceTypeNode)a);
                  //$$ = $<ReferenceTypeNode>1;
				}
			},
			new Action() {	// [14] type_variable = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
                               return new Symbol(new String(id));
                               // $$ = $1;
				}
			},
			new Action() {	// [15] class_or_interface = name.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					
                             return new Symbol(new ReferenceTypeNode(n));
                             // $$ = new ReferenceTypeNode($1);
				}
			},
			new Action() {	// [16] class_or_interface = class_or_interface.c LT type_argument_list_1.t DOT name.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 5];
					final String n = (String) _symbol_n.value;
					
     String genericTyping = "<" + t + "." + n;
     //String genericTyping = "<" + $3 + "." + $5;
     ReferenceTypeNode result = c;
     //$$ = $1;
     c.setGenericsTyping(genericTyping);
     //$1.setGenericsTyping(genericTyping);
                                                              return new Symbol(result);
				}
			},
			Action.RETURN,	// [17] class_or_interface_type = class_or_interface
			new Action() {	// [18] class_or_interface_type = class_or_interface.c LT type_argument_list_1.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final String l = (String) _symbol_l.value;
					
                                               String genericTyping = "<" + l;
                                               //String genericTyping = "<" + $3;
                                               ReferenceTypeNode result = c;
                                               //$$ = $1;
                                               c.setGenericsTyping(genericTyping);
                                               //$1.setGenericsTyping(genericTyping);
                                                   return new Symbol(result);
				}
			},
			Action.RETURN,	// [19] class_type = class_or_interface_type
			Action.RETURN,	// [20] interface_type = class_or_interface_type
			new Action() {	// [21] array_type = primitive_type.t dims.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayTypeNode d = (ArrayTypeNode) _symbol_d.value;
					
                                    d.setTypeForArray(t);
                                    //$2.setTypeForArray($1);
                                      return new Symbol(d);
                                    //$$ = $2;
				}
			},
			new Action() {	// [22] array_type = name.n dims.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayTypeNode d = (ArrayTypeNode) _symbol_d.value;
					
     d.setTypeForArray(new ReferenceTypeNode(n));
     //$2.setTypeForArray(new ReferenceTypeNode($1));
     return new Symbol(d);
     //$$ = $2;
				}
			},
			new Action() {	// [23] array_type = class_or_interface.c LT type_argument_list_1.t DOT name.n dims.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 5];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final ArrayTypeNode d = (ArrayTypeNode) _symbol_d.value;
					
     c.setGenericsTyping("<" + t + "." + n);
     //$1.setGenericsTyping("<" + $3 + "." + $5);
     d.setTypeForArray(c);
     //$6.setTypeForArray($1);
     return new Symbol(d);
     //$$ = $6;
				}
			},
			new Action() {	// [24] array_type = class_or_interface.c LT type_argument_list_1.t dims.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 4];
					final ArrayTypeNode d = (ArrayTypeNode) _symbol_d.value;
					
     c.setGenericsTyping("<" + t);
     //$1.setGenericsTyping("<" + $3);
     d.setTypeForArray(c);
     //$4.setTypeForArray($1);
     return new Symbol(d);
     //$$ = $4;
				}
			},
			new Action() {	// [25] wildcard = QUESTION
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                     return new Symbol("?");
                     //$$ = "?";
				}
			},
			new Action() {	// [26] wildcard = QUESTION EXTENDS reference_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final ReferenceTypeNode t = (ReferenceTypeNode) _symbol_t.value;
					
    return new Symbol("? extends " + t.getFullyTypedName());
     //$$ = "? extends " + $3.getFullyTypedName();
				}
			},
			new Action() {	// [27] wildcard = QUESTION SUPER reference_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final ReferenceTypeNode t = (ReferenceTypeNode) _symbol_t.value;
					
    return new Symbol("? super " +  t.getFullyTypedName());
     //$$ = "? super " + $3.getFullyTypedName();
				}
			},
			new Action() {	// [28] wildcard_1 = QUESTION GT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                          return new Symbol("?>");
                          //$$ = "?>";
				}
			},
			new Action() {	// [29] wildcard_1 = QUESTION EXTENDS reference_type_1.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
    return new Symbol("? extends " + t);
     //$$ = "? extends " + $3;
				}
			},
			new Action() {	// [30] wildcard_1 = QUESTION SUPER reference_type_1.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
    return new Symbol("? super " + t) ;
     //$$ = "? super " + $3;
				}
			},
			new Action() {	// [31] wildcard_2 = QUESTION RSHIFT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                              return new Symbol("?>>");
                              //$$ = "?>>";
				}
			},
			new Action() {	// [32] wildcard_2 = QUESTION EXTENDS reference_type_2.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                           return new Symbol("? extends " + t);
     //$$ = "? extends " + $3;
				}
			},
			new Action() {	// [33] wildcard_2 = QUESTION SUPER reference_type_2.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                         return new Symbol("? super " + t);
     //$$ = "? super " + $3;
				}
			},
			new Action() {	// [34] wildcard_3 = QUESTION URSHIFT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                               return new Symbol("?>>");
                               //$$ = "?>>";
				}
			},
			new Action() {	// [35] wildcard_3 = QUESTION EXTENDS reference_type_3.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                           return new Symbol("? extends " + t);
     //$$ = "? extends " + $3;
				}
			},
			new Action() {	// [36] wildcard_3 = QUESTION SUPER reference_type_3.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                         return new Symbol("? super " + t);
     //$$ = "? super " + $3;
				}
			},
			new Action() {	// [37] reference_type_1 = reference_type.r GT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					
                                        return new Symbol( r.getFullyTypedName() + ">");
                                        //$$ = $1.getFullyTypedName() + ">";
				}
			},
			new Action() {	// [38] reference_type_1 = class_or_interface.c LT type_argument_list_2.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                                      return new Symbol( c.getFullyTypedName() + "<" +  t);
     //$$ = $1.getFullyTypedName() + "<" + $3;
				}
			},
			new Action() {	// [39] reference_type_2 = reference_type.r RSHIFT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					
                                            return new Symbol( r.getFullyTypedName() + ">>");
                                            //$$ = $1.getFullyTypedName() + ">>";
				}
			},
			new Action() {	// [40] reference_type_2 = class_or_interface.c LT type_argument_list_3.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                                      return new Symbol( c.getFullyTypedName() + "<" +  t);
     //$$ = $1.getFullyTypedName() + "<" + $3;
				}
			},
			new Action() {	// [41] reference_type_3 = reference_type.r URSHIFT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					
                                             return new Symbol( r.getFullyTypedName() + ">>>");
                                             //$$ = $1.getFullyTypedName() + ">>>";
				}
			},
			new Action() {	// [42] type_argument_list = type_argument.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					
                                      return new Symbol( t);
                                      //$$ = $1;
				}
			},
			new Action() {	// [43] type_argument_list = type_argument_list.l COMMA type_argument.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final String a = (String) _symbol_a.value;
					
                                               return new Symbol( l + ", " +  a);
     //$$ = $1 + ", " + $3;
				}
			},
			Action.RETURN,	// [44] type_argument_list_1 = type_argument_1
			new Action() {	// [45] type_argument_list_1 = type_argument_list.t_list COMMA type_argument_1.t1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t_list = _symbols[offset + 1];
					final String t_list = (String) _symbol_t_list.value;
					final Symbol _symbol_t1 = _symbols[offset + 3];
					final String t1 = (String) _symbol_t1.value;
					
                                                       return new Symbol(t_list + ", " + t1);
                                                       //$$ = $1 + ", " + $3;
				}
			},
			Action.RETURN,	// [46] type_argument_list_2 = type_argument_2
			new Action() {	// [47] type_argument_list_2 = type_argument_list.t_list COMMA type_argument_2.t2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t_list = _symbols[offset + 1];
					final String t_list = (String) _symbol_t_list.value;
					final Symbol _symbol_t2 = _symbols[offset + 3];
					final String t2 = (String) _symbol_t2.value;
					
                                                       return new Symbol(t_list + ", " + t2);
                                                       //$$ = $1 + ", " + $3;
				}
			},
			Action.RETURN,	// [48] type_argument_list_3 = type_argument_3
			new Action() {	// [49] type_argument_list_3 = type_argument_list.t_list COMMA type_argument_3.t3
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t_list = _symbols[offset + 1];
					final String t_list = (String) _symbol_t_list.value;
					final Symbol _symbol_t3 = _symbols[offset + 3];
					final String t3 = (String) _symbol_t3.value;
					
                                                       return new Symbol(t_list + ", " + t3);
                                                       //$$ = $1 + ", " + $3;
				}
			},
			new Action() {	// [50] type_argument = reference_type.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					
                                  return new Symbol(r.getFullyTypedName());
                                  //$$ = $1.getFullyTypedName();
				}
			},
			Action.RETURN,	// [51] type_argument = wildcard
			Action.RETURN,	// [52] type_argument_1 = reference_type_1
			Action.RETURN,	// [53] type_argument_1 = wildcard_1
			Action.RETURN,	// [54] type_argument_2 = reference_type_2
			Action.RETURN,	// [55] type_argument_2 = wildcard_2
			Action.RETURN,	// [56] type_argument_3 = reference_type_3
			Action.RETURN,	// [57] type_argument_3 = wildcard_3
			Action.RETURN,	// [58] modifiers_opt = modifiers
			Action.RETURN,	// [59] modifiers_opt = modifiers_none
			new Action() {	// [60] modifiers = modifier.mod
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_mod = _symbols[offset + 1];
					final Object mod = (Object) _symbol_mod.value;
					
                      ArrayList result = new ArrayList<Object>();
                          //$$ = new ArrayList<Object>();
                          result.add(mod);
                          return new Symbol((List)result);
                      //$<List>$.add($1);
				}
			},
			new Action() {	// [61] modifiers = modifiers.mods modifier.mod
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_mods = _symbols[offset + 1];
					final List mods = (List) _symbol_mods.value;
					final Symbol _symbol_mod = _symbols[offset + 2];
					final Object mod = (Object) _symbol_mod.value;
					
     mods.add(mod);
     //special case
     return new Symbol(mods);
     //$1.add($2);
				}
			},
			new Action() {	// [62] modifiers_none = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
        return new Symbol(new ArrayList<Object>());
//$$ = new ArrayList<Object>();
				}
			},
			new Action() {	// [63] modifier = PUBLIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                   return new Symbol(Modifier.PUBLIC);
                   //Modifier.PUBLIC;
				}
			},
			new Action() {	// [64] modifier = PROTECTED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                 return new Symbol(Modifier.PROTECTED);
        //$$ = Modifier.PROTECTED;
				}
			},
			new Action() {	// [65] modifier = PRIVATE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
               return new Symbol(Modifier.PRIVATE);
        //$$ = Modifier.PRIVATE;
				}
			},
			new Action() {	// [66] modifier = STATIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
              return new Symbol(Modifier.STATIC);
        //$$ = Modifier.STATIC;
				}
			},
			new Action() {	// [67] modifier = ABSTRACT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                return new Symbol(Modifier.ABSTRACT);
        //$$ = Modifier.ABSTRACT;
				}
			},
			new Action() {	// [68] modifier = FINAL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                              return new Symbol(Modifier.FINAL);
        //$$ = Modifier.FINAL;
				}
			},
			new Action() {	// [69] modifier = NATIVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                              return new Symbol(Modifier.NATIVE);
        //$$ = Modifier.NATIVE;
				}
			},
			new Action() {	// [70] modifier = SYNCHRONIZED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
            return new Symbol(Modifier.SYNCHRONIZED);
     //$$ = Modifier.SYNCHRONIZED;
				}
			},
			new Action() {	// [71] modifier = TRANSIENT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
         return new Symbol(Modifier.TRANSIENT);
     //$$ = Modifier.TRANSIENT;
				}
			},
			new Action() {	// [72] modifier = VOLATILE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
         return new Symbol(Modifier.VOLATILE);
     //$$ = Modifier.VOLATILE;
				}
			},
			new Action() {	// [73] modifier = STRICTFP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
         return new Symbol(Modifier.STRICTFP);
             //$$ = Modifier.STRICTFP;
				}
			},
			new Action() {	// [74] modifier = annotation.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Annotation a = (Annotation) _symbol_a.value;
					
                 return new Symbol(a);
     //$$ = $1;
				}
			},
			new Action() {	// [75] name = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
                      return new Symbol(id);
                   //$$ = $1;
				}
			},
			new Action() {	// [76] name = name.n DOT IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					
                             return new Symbol(n + ". " + id);
                             //$$ = $1 + "." + $3;
				}
			},
			new Action() {	// [77] dims = LBRACK RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                      return new Symbol(new ArrayTypeNode());
                      // $$ = new ArrayTypeNode();
				}
			},
			new Action() {	// [78] dims = dims.d LBRACK RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final ArrayTypeNode d = (ArrayTypeNode) _symbol_d.value;
					
                            return new Symbol(new ArrayTypeNode(d));
     //$$ = new ArrayTypeNode($1);
				}
			},
			new Action() {	// [79] throws = THROWS class_type_list.c_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c_list = _symbols[offset + 2];
					final List c_list = (List) _symbol_c_list.value;
					
                                        return new Symbol(c_list);
                                        //$$ = $2;
				}
			},
			new Action() {	// [80] throws = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
               return new Symbol(new ArrayList<TypeNode>());
    //$$ = new ArrayList<TypeNode>();
				}
			},
			new Action() {	// [81] class_type_list = class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					
                                List val = new ArrayList<TypeNode>();
                                val.add(c);
                                return new Symbol(val);
                                //return new Symbol(val;
                                //$$ = new ArrayList<TypeNode>();
                                // $<List>$.add($1);
				}
			},
			new Action() {	// [82] class_type_list = class_type_list.l COMMA class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final ReferenceTypeNode c = (ReferenceTypeNode) _symbol_c.value;
					
                                                        l.add(c);
                                                        // $<List>1.add($3);
                                                        //special case
                                          return new Symbol(l);
				}
			},
			new Action() {	// [83] method_declarator = IDENTIFIER.id LPAREN formal_parameter_list_opt.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					
                                                                             return new Symbol(new MethodSignatureNode(id, l));
                                                                             //$$ = new MethodSignatureNode($1, $3);
				}
			},
			Action.RETURN,	// [84] formal_parameter_list_opt = formal_parameter_list
			new Action() {	// [85] formal_parameter_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                  return new Symbol(new ArrayList<ParameterNode>());
                  //$$ = new ArrayList<ParameterNode>();
				}
			},
			new Action() {	// [86] formal_parameter_list = formal_parameter.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final ParameterNode f = (ParameterNode) _symbol_f.value;
					
                                          List<ParameterNode> list = new ArrayList<ParameterNode>();
                                          //list.add($1);
                                            list.add(f);
                                            //$$ = list;
                                            return new Symbol(list);
				}
			},
			new Action() {	// [87] formal_parameter_list = formal_parameter_list.f_list COMMA formal_parameter.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f_list = _symbols[offset + 1];
					final List f_list = (List) _symbol_f_list.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final ParameterNode f = (ParameterNode) _symbol_f.value;
					
                                                             f_list.add(f);
                                                             //$1.add($3);
                                                             return new Symbol(f_list);
				}
			},
			new Action() {	// [88] formal_parameter = type.t variable_declarator_id.v_id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					final Symbol _symbol_v_id = _symbols[offset + 2];
					final String v_id = (String) _symbol_v_id.value;
					
                                                       return new Symbol(new ParameterNode(t, v_id));
                                                       //$$ = new ParameterNode($1, $2);
				}
			},
			new Action() {	// [89] formal_parameter = type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					
                           return new Symbol(new ParameterNode(t, null));
                     //$$ = new ParameterNode($1, null);
				}
			},
			new Action() {	// [90] formal_parameter = FINAL type.t variable_declarator_id.v_id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeNode t = (TypeNode) _symbol_t.value;
					final Symbol _symbol_v_id = _symbols[offset + 3];
					final String v_id = (String) _symbol_v_id.value;
					
                                                             return new Symbol(new ParameterNode(t, v_id, true));
                     //$$ = new ParameterNode($2, $3, true);
				}
			},
			new Action() {	// [91] formal_parameter = FINAL type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeNode t = (TypeNode) _symbol_t.value;
					
                                 return new Symbol(new ParameterNode(t, null, true));
                     //$$ = new ParameterNode($2, null, true);
				}
			},
			new Action() {	// [92] formal_parameter = type.t ELLIPSIS IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					
                                                  return new Symbol(new ParameterNode(t, id, false, true));
                                                  //$$ = new ParameterNode($1, $3, false, true);
				}
			},
			new Action() {	// [93] formal_parameter = type.t ELLIPSIS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					
                                    return new Symbol(new ParameterNode(t, null, false, true));
                     //$$ = new ParameterNode($1, null, false, true);
				}
			},
			new Action() {	// [94] formal_parameter = FINAL type.t ELLIPSIS IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeNode t = (TypeNode) _symbol_t.value;
					final Symbol _symbol_id = _symbols[offset + 4];
					final String id = (String) _symbol_id.value;
					
                                                        return new Symbol(new ParameterNode(t, id, true, true));
                     //$$ = new ParameterNode($2, $4, true, true);
				}
			},
			new Action() {	// [95] formal_parameter = FINAL type.t ELLIPSIS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeNode t = (TypeNode) _symbol_t.value;
					
                                          return new Symbol(new ParameterNode(t, null, true, true));
                                        //$$ = new ParameterNode($2, null, true, true);
				}
			},
			new Action() {	// [96] variable_declarator_id = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
                                        return new Symbol(id);
                                     //$$ = $1;
				}
			},
			new Action() {	// [97] variable_declarator_id = variable_declarator_id.v LBRACK RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					
     // We know this is always preceeded by 'type' production.
     //how to accesss $0 in beaver
     //$<Object>0 = new ArrayTypeNode($<TypeNode>0);
                                              return new Symbol(v);
     //$$ = $1;
				}
			},
			new Action() {	// [98] type_parameter_list = type_parameter_list.l COMMA type_parameter.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final String p = (String) _symbol_p.value;
					
                                                                    return new Symbol(l +", " + p);
                                                                //$$ = $1 + ", " + $3;
				}
			},
			Action.RETURN,	// [99] type_parameter_list = type_parameter
			Action.RETURN,	// [100] type_parameter_list_1 = type_parameter_1
			new Action() {	// [101] type_parameter_list_1 = type_parameter_list.l COMMA type_parameter_1.p1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_p1 = _symbols[offset + 3];
					final String p1 = (String) _symbol_p1.value;
					
                                                    return new Symbol(l + ", " + p1);
                                                    //$$ = $1 + ", " + $3;
				}
			},
			new Action() {	// [102] type_parameter = type_variable.v type_bound_opt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final String b = (String) _symbol_b.value;
					
                                                   return new Symbol(v + b);
                                                   //$$ = $1 + $2;
				}
			},
			new Action() {	// [103] type_parameter_1 = type_variable.t GT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					
                                       return new Symbol(t + ">");
                                     //$$ = $1 + ">";
				}
			},
			new Action() {	// [104] type_parameter_1 = type_variable.t type_bound_1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final String b = (String) _symbol_b.value;
					
                                   return new Symbol(t + b);
                                   //$$ = $1 + $2;
				}
			},
			new Action() {	// [105] type_bound_1 = EXTENDS reference_type_1.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 2];
					final String r = (String) _symbol_r.value;
					
                                           return new Symbol(" extends " + r);
                                         //$$ = " extends " + $1;
				}
			},
			new Action() {	// [106] type_bound_1 = EXTENDS reference_type.r additional_bound_list_1.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 2];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final String a = (String) _symbol_a.value;
					
                                                       return new Symbol(" extends " + r.getFullyTypedName() + a);
     //$$ = " extends " + $2.getFullyTypedName() + $3;
				}
			},
			Action.RETURN,	// [107] type_bound_opt = type_bound
			new Action() {	// [108] type_bound_opt = none
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
         return new Symbol("");
         //$$ = "";
				}
			},
			new Action() {	// [109] type_bound = EXTENDS reference_type.r additional_bound_list_opt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 2];
					final ReferenceTypeNode r = (ReferenceTypeNode) _symbol_r.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final String a = (String) _symbol_a.value;
					
                                                                   return new Symbol("extends " + r.getFullyTypedName() + a);
                                                               //$$ = "extends " + $2.getFullyTypedName() + $3;
				}
			},
			Action.RETURN,	// [110] additional_bound_list_opt = additional_bound_list
			new Action() {	// [111] additional_bound_list_opt = none
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
         return new Symbol("");
         //$$ = "";
				}
			},
			new Action() {	// [112] additional_bound_list = additional_bound.a additional_bound_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final String b = (String) _symbol_b.value;
					
                                                                    return new Symbol(a + b);
                                                                //$$ = $1 + $2;
				}
			},
			Action.RETURN,	// [113] additional_bound_list = additional_bound
			new Action() {	// [114] additional_bound_list_1 = additional_bound.a additional_bound_list_1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final String b = (String) _symbol_b.value;
					
                                                                        return new Symbol(a + b);
                                                                        //$$ = $1 + $2;
				}
			},
			new Action() {	// [115] additional_bound_list_1 = AND reference_type_1.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					
                           return new Symbol(" & " + t);
     //$$ = " & " + $1;
				}
			},
			new Action() {	// [116] additional_bound = AND interface_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final ReferenceTypeNode t = (ReferenceTypeNode) _symbol_t.value;
					
                                         return new Symbol(" & " + t.getFullyTypedName());
                                       //$$ = " & " + $2.getFullyTypedName();
				}
			},
			new Action() {	// [117] none = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                                 return new Symbol(null);
            //$$ = null;
				}
			},
			new Action() {	// [118] constructor_declaration = modifiers_opt.m constructor_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ConstructorSignatureNode d = (ConstructorSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final List t = (List) _symbol_t.value;
					
                                                                       //$$ = $2;
                                                                       ConstructorSignatureNode result = d;
                                                                       //$<ConstructorSignatureNode>$.setModifiers($1);
                                                                       result.setModifiers(m);
                                                                       //$<ConstructorSignatureNode>$.setThrows($3);
                                                                       result.setThrows(t);
                                                                             return new Symbol(result);
				}
			},
			new Action() {	// [119] constructor_declaration = modifiers_opt.m LT type_parameter_list_1.l constructor_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 4];
					final ConstructorSignatureNode d = (ConstructorSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 5];
					final List t = (List) _symbol_t.value;
					
     //$$ = $4;
     ConstructorSignatureNode result = d;
     //$<ConstructorSignatureNode>$.setModifiers($1);
     result.setModifiers(m);
     //$<ConstructorSignatureNode>$.setExtraTypeInfo("<" + $3);
     result.setExtraTypeInfo("<" + l);
     //$<ConstructorSignatureNode>$.setThrows($5);
     result.setThrows(t);
     return new Symbol(result);
				}
			},
			new Action() {	// [120] constructor_declarator = name.n LPAREN formal_parameter_list_opt.p RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					
                                                                           return new Symbol(new ConstructorSignatureNode(n, p));
                                                                       //$$ = new ConstructorSignatureNode($1, $3);
				}
			},
			new Action() {	// [121] method_header = modifiers_opt.m type.p method_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_p = _symbols[offset + 2];
					final TypeNode p = (TypeNode) _symbol_p.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final MethodSignatureNode d = (MethodSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final List t = (List) _symbol_t.value;
					
                                                                     //$$ = $3;
                                                                     MethodSignatureNode result = d;
                                                                     //$<MethodSignatureNode>$.setModifiers($1);
                                                                     result.setModifiers(m);
                                                                     //$<MethodSignatureNode>$.setReturnType($2);
                                                                     result.setReturnType(p);
                                                                     //$<MethodSignatureNode>$.setThrows($4);
                                                             result.setThrows(t);
                                                                     return new Symbol(result);
				}
			},
			new Action() {	// [122] method_header = modifiers_opt.m LT type_parameter_list_1.l type.p method_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final TypeNode p = (TypeNode) _symbol_p.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final MethodSignatureNode d = (MethodSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final List t = (List) _symbol_t.value;
					
                  //$$ = $5;
                  MethodSignatureNode result = d;
                  //$<MethodSignatureNode>$.setModifiers($1);
                  result.setModifiers(m);
                  //$<MethodSignatureNode>$.setExtraTypeInfo("<" + $3);
                  result.setExtraTypeInfo("<" + l);
                  //$<MethodSignatureNode>$.setReturnType($4);
                  result.setReturnType(p);
                  //$<MethodSignatureNode>$.setThrows($6);
                  result.setThrows(t);
                  return new Symbol(result);
				}
			},
			new Action() {	// [123] method_header = modifiers_opt.m VOID method_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final MethodSignatureNode d = (MethodSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final List t = (List) _symbol_t.value;
					
                  //$$ = $3;
                  MethodSignatureNode result = d;
                  //$<MethodSignatureNode>$.setModifiers($1);
                  result.setModifiers(m);
                  //$<MethodSignatureNode>$.setReturnType(PrimitiveTypeNode.VOID);
                  result.setReturnType(PrimitiveTypeNode.VOID);
                  //$<MethodSignatureNode>$.setThrows($4);
                  result.setThrows(t);
                  return new Symbol(result);
				}
			},
			new Action() {	// [124] method_header = modifiers_opt.m LT type_parameter_list_1.l VOID method_declarator.d throws.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final MethodSignatureNode d = (MethodSignatureNode) _symbol_d.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final List t = (List) _symbol_t.value;
					

                  MethodSignatureNode result = d;
                  //$$ = $5;
                  result.setModifiers(m);
                  //$<MethodSignatureNode>$.setModifiers($1);
                  result.setExtraTypeInfo("<" + l);
                  //$<MethodSignatureNode>$.setExtraTypeInfo("<" + $3);
                  result.setReturnType(PrimitiveTypeNode.VOID);
                  //$<MethodSignatureNode>$.setReturnType(PrimitiveTypeNode.VOID);
                  result.setThrows(t);
                  //$<MethodSignatureNode>$.setThrows($6);
                  return new Symbol(result);
				}
			},
			new Action() {	// [125] annotation = annotation_name.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					
                                return new Symbol(new Annotation(a, new ArrayList<AnnotationParameter>()));
                              //$$ = new Annotation($1, new ArrayList<AnnotationParameter>());
				}
			},
			new Action() {	// [126] annotation = annotation_name.a LPAREN annotation_params_opt.p RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					
                                                                      return new Symbol(new Annotation(a,p));
               //$$ = new Annotation($1, $3);
				}
			},
			new Action() {	// [127] annotation_name = AT.at name.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_at = _symbols[offset + 1];
					final String at = (String) _symbol_at.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
                           //$$ = $1 + $2;
                                return new Symbol((at + n));
				}
			},
			new Action() {	// [128] annotation_param = type_variable.t EQUAL annotation_value.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final AnnotationExpression a = (AnnotationExpression) _symbol_a.value;
					
                                                             return new Symbol(new AnnotationParameter(t,a));
                                                             //$$ = new AnnotationParameter($1, $3);
				}
			},
			new Action() {	// [129] annotation_param = annotation_value.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final AnnotationExpression a = (AnnotationExpression) _symbol_a.value;
					
                                       return new Symbol(new DefaultAnnotationParameter(a));
                                       // $$ = new DefaultAnnotationParameter($1);
				}
			},
			new Action() {	// [130] annotation_params = annotation_param.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final AnnotationParameter p = (AnnotationParameter) _symbol_p.value;
					
                                      ArrayList result = new ArrayList<AnnotationParameter>();
                                      //$$ = new ArrayList<AnnotationParameter>();
                                        result.add(p);
                                        return new Symbol(result);
                                      //$<List>$.add($1);
				}
			},
			new Action() {	// [131] annotation_params = annotation_params.a COMMA annotation_param.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final AnnotationParameter p = (AnnotationParameter) _symbol_p.value;
					
                      a.add(p);
                      //$1.add($3);
                      //special case
                      return new Symbol(a);
				}
			},
			new Action() {	// [132] annotation_value = annotation.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Annotation l = (Annotation) _symbol_l.value;
					
                               return new Symbol((AnnotationExpression)l);
                               //$$ = $<AnnotationExpression>1;
				}
			},
			new Action() {	// [133] annotation_value = type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeNode t = (TypeNode) _symbol_t.value;
					
                           return new Symbol((AnnotationExpression)t);
                     //$$ = $<AnnotationExpression>1;
				}
			},
			new Action() {	// [134] annotation_value = literal.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Literal l = (Literal) _symbol_l.value;
					
                              return new Symbol((AnnotationExpression)l);
                     //$$ = $<AnnotationExpression>1;
				}
			},
			new Action() {	// [135] annotation_value = LCURLY annotation_array_values.v RCURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 2];
					final List v = (List) _symbol_v.value;
					
                                                            return new Symbol(new ArrayAnnotationExpression(v));
                     // $$ = new ArrayAnnotationExpression($2);
				}
			},
			new Action() {	// [136] annotation_value = LCURLY RCURLY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                  return new Symbol(new ArrayAnnotationExpression(new ArrayList<AnnotationExpression>()));
                     // $$ = new ArrayAnnotationExpression(new ArrayList<AnnotationExpression>());
				}
			},
			new Action() {	// [137] annotation_array_values = annotation_value.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final AnnotationExpression a = (AnnotationExpression) _symbol_a.value;
					
                                  ArrayList result = new ArrayList<AnnotationExpression>();
                                              //$$ = new ArrayList<AnnotationExpression>();
                                              result.add(a);
                                              return new Symbol(result);
                                              //return new Symbol(result;
                                              //$<List>$.add($1);
				}
			},
			new Action() {	// [138] annotation_array_values = annotation_array_values.a COMMA annotation_value.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_v = _symbols[offset + 3];
					final AnnotationExpression v = (AnnotationExpression) _symbol_v.value;
					
                            a.add(v);
                            //$1.add($3);
                            //special case
                     return new Symbol(a);
				}
			},
			new Action() {	// [139] annotation_params_none = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new ArrayList<AnnotationParameter>());
                            //$$ = new ArrayList<AnnotationParameter>();
				}
			},
			Action.RETURN,	// [140] annotation_params_opt = annotation_params
			Action.RETURN,	// [141] annotation_params_opt = annotation_params_none
			new Action() {	// [142] literal = STRING_LITERAL.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					
                            return new Symbol(new StringLiteral(s));
                          // $$ = new StringLiteral($1);
				}
			},
			new Action() {	// [143] literal = CHARACTER_LITERAL.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					
                               return new Symbol(new CharacterLiteral(c));
            //$$ = new CharacterLiteral($1);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
